# -*- coding: utf-8 -*-
"""lab3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T0Y0aUD2iBXNWPKf2bmOb04x5CNi43l-
"""

#task_1
n=int(input())
arr=list(map(int,input().split()))

def merge(a,b):
    i=0
    j=0
    s_arr=[]
    count=0
    while i<len(a) and j<len(b):
        if a[i]<b[j]:
            s_arr.append(a[i])
            i+=1
        else:
            s_arr.append(b[j])
            j+=1
            count+=len(a)-i
    while i<len(a):
        s_arr.append(a[i])
        i+=1
    while j<len(b):
        s_arr.append(b[j])
        j+=1
    return s_arr,count

def mergesort(arr):
    if len(arr)<=1:
        return arr,0
    mid=len(arr)//2
    a, a_count=mergesort(arr[ :mid])
    b, b_count=mergesort(arr[mid: ])
    merged, merged_count=merge(a,b)
    totalcount=a_count+b_count+merged_count
    return merged,totalcount

s_arr,count=mergesort(arr)
print(count)
print(" ".join(map(str,s_arr)))

#task_2

n=int(input())
arr=list(map(int,input().split()))

maxx=arr[0]
max_val=maxx+ arr[1]**2
for j in range(1,n):
    max_val=max(max_val, maxx+arr[j]**2)
    maxx=max(maxx,arr[j])
print(max_val)

#task_3
  a,b=map(int,input().split())
mod=107
def func(a,b,mod):
    if b==0:
        return 1
    if b%2==0:
        h=func(a,b//2,mod)
        return (h*h)%mod
    else:
        return (a*func(a,b-1,mod))%mod

r=func(a,b,mod)
print(r)

#task_4
def pow(a, n, mod):
    ans = 1
    a = a % mod
    while n > 0:
        if n % 2 != 0:
            ans = (ans * a) % mod
        a = (a * a) % mod
        n //= 2
    return ans
def powsum(a, n, mod):
    if n == 0:
        return 0
    if n == 1:
        return a % mod

    mid = n // 2
    s = powsum(a, mid, mod)
    pow_mid = pow(a, mid, mod)

    if n % 2 == 0:
        return (s + (pow_mid * s) % mod) % mod
    else:
        return (s + (pow_mid * s) % mod + pow(a, n, mod)) % mod



x = int(input())


for i in range(x):
    a, n, mod = map(int, input().split())
    result = powsum(a, n, mod)
    print(result)

#task_5
def func1(arr):
    if not arr:
        return []
    mid=len(arr)//2
    root=arr[mid]
    l_sub=func1(arr[ :mid])
    r_sub=func1(arr[mid+1: ])
    return [root]+l_sub+r_sub

a=int(input())
arr = list(map(int, input().split()))
r=func1(arr)

print(*r)

#task_6
n=int(input())
inord=list(map(int, input().split()))
preord=list(map(int,input().split()))

def postord(inord,preord):
    if not inord or not preord:
        return []

    root=preord[0]
    root_idx=inord.index(root)

    l=postord(inord[:root_idx],preord[1:root_idx+1])
    r=postord(inord[root_idx+1:],preord[root_idx+1:])
    return l+r+[root]
r=postord(inord,preord)
print(*r)