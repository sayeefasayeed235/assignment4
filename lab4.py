# -*- coding: utf-8 -*-
"""lab4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O8L0HahYYkjgPoserGi39x_4axojLoXk
"""

#taskA
n, m = map(int, input().split())
mtx = [[0] * n for _ in range(n)]

for _ in range(m):
    u, v, w = map(int, input().split())
    mtx[u-1][v-1] = w

for r in mtx:
    for nms in r:
        print(nms, end=' ')
    print()

#taskB
n, m = map(int, input().split())
u = list(map(int, input().split()))
v = list(map(int, input().split()))
w = list(map(int, input().split()))

adj = [[] for _ in range(n + 1)]

for i in range(m):
    src = u[i]
    d = v[i]
    wt = w[i]
    adj[src].append((d, wt))

for node in range(1, n + 1):
    c = f"{node}:"
    for d, wt in adj[node]:
        c += f" ({d},{wt})"
    print(c)

#taskC
n = int(input())
mtx = [[0] * n for _ in range(n)]

for i in range(n):
    sec = list(map(int, input().split()))
    a_n = sec[1:]
    for node in a_n:
        mtx[i][node] = 1

for r in mtx:
    print(' '.join(map(str, r)) + ' ')

#taskD
n, m = map(int, input().split())
u = list(map(int, input().split()))
v = list(map(int, input().split()))

deg = [0] * (n + 1)
for i in range(m):
    x = u[i]
    y = v[i]
    deg[x] += 1
    deg[y] += 1

c = 0
for i in range(1, n + 1):
    if deg[i] % 2 != 0:
        c += 1

print("YES" if c in (0, 2) else "NO")

#taskE
n, m = map(int, input().split())
u = list(map(int, input().split()))
v = list(map(int, input().split()))
in_degree = [0] * (n + 1)
out_degree = [0] * (n + 1)
for i in range(m):
    x = u[i]
    y = v[i]
    in_degree[y] += 1
    out_degree[x] += 1


s = [in_degree[i] - out_degree[i] for i in range(1, n + 1)]
print(' '.join(map(str, s)))

#taskF
n = int(input())
x, y = map(int, input().split())
moves = []
for i in range(x-1, x+2):
    for j in range(y-1, y+2):
        if i == x and j == y:
            continue
        if 1 <= i <= n and 1 <= j <= n:
            moves.append((i, j))
moves.sort()
print(len(moves))
for move in moves:
    print(move[0], move[1])

#taskG
import sys
import math

def main():
    input = sys.stdin.read().split()
    ptr = 0
    N = int(input[ptr])
    ptr += 1
    Q = int(input[ptr])
    ptr += 1

    # Precompute adjacency lists
    adj = [[] for _ in range(N + 1)]  # 1-based indexing
    for x in range(1, N + 1):
        neighbors = []
        for j in range(1, N + 1):
            if j == x:
                continue
            if math.gcd(x, j) == 1:
                neighbors.append(j)
        neighbors.sort()
        adj[x] = neighbors

    # Process queries
    output = []
    for _ in range(Q):
        X = int(input[ptr])
        ptr += 1
        K = int(input[ptr])
        ptr += 1
        if K > len(adj[X]):
            output.append("-1")
        else:
            output.append(str(adj[X][K-1]))

    print('\n'.join(output))

if __name__ == "__main__":
    main()

n, q = map(int, input().split())
l = [[] for _ in range(n + 1)]
for i in range(1, n + 1):
    for j in range(1, n + 1):
        if i != j:
            a, b = i, j
            while b:
                a, b = b, a % b
            if a == 1:
                l[i].append(j)
for i in range(1, n + 1):
    l[i].sort()
for _ in range(q):
    s, t = map(int, input().split())
    if t <= len(l[s]):
        print(l[s][t - 1])
    else:
        print(-1)

"""2000 3
903 24
702 563
942 50
"""